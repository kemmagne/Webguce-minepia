<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:atm="http://java.sun.com/jsf/composite/components/atm"
    xmlns:composite="http://java.sun.com/jsf/composite"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:p="http://primefaces.org/ui" xmlns:r="http://java.sun.com/jsf/composite/components/rep/elements">
    <composite:interface componentType="org.guce.web.component.Default">
        <f:loadBundle basename="org/guce/web/process/atm/util/Bundle" var="atmBundle"/>
        <composite:attribute name="value" required="true" type="java.lang.Object"/>
        <composite:attribute name="requiredList" type="java.lang.String"/>
        <composite:attribute name="readOnlyList" type="java.lang.String"/>
        <composite:attribute name="renderedList" type="java.lang.String"/>
        <composite:attribute name="updateList" type="java.lang.String"/>
        <composite:attribute default="false" name="required" required="false"/>
        <composite:attribute default="true" name="renderedBoolean" required="false"/>
        <composite:attribute default="false" name="readOnly" required="false"/>
        <composite:attribute name="styleClass" required="false" type="java.lang.String"/>
        <composite:attribute default="false" name="returnSame"/>
        <composite:attribute name="fieldChange"/>
    </composite:interface>
    <composite:implementation>
        <f:loadBundle basename="org/guce/web/process/atm/util/Bundle" var="atmBundle"/>
        <h:panelGrid columns="4" id="cblock" styleClass="#{cc.attrs.styleClass} transportBlock">
            <h:outputLabel for="blNumber" rendered="#{cc.isRendered('blNumber',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.blNumberLabel} <span>#{cc.isRequiredString('blNumber',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup rendered="#{cc.isRendered('blNumber',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
                <p:inputText
                    converterMessage="#{atmBundle.blNumber} #{atmBundle.invalid}"
                    id="blNumber" maxlength="35"
                    readonly="#{cc.isReadOnly('blNumber',cc.attrs.readOnlyList,cc.attrs.readOnly)}"
                    rendered="#{cc.isRendered('blNumber',cc.attrs.renderedList,cc.attrs.renderedBoolean)}"
                    required="#{cc.isRequired('blNumber',cc.attrs.requiredList,cc.attrs.required)}"
                    requiredMessage="#{atmBundle.blNumber} #{atmBundle.required}"
                    size="35" style="width: 140px"
                    validatorMessage="#{atmBundle.blNumber} #{atmBundle.invalid}" value="#{cc.attrs.value.blNumber}"/>
                <p:message for="blNumber"/>
            </h:panelGroup>
            <h:outputLabel for="travelNumber" rendered="#{cc.isRendered('travelNumber',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.travelNumberLabel} <span>#{cc.isRequiredString('travelNumber',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup rendered="#{cc.isRendered('travelNumber',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
                <p:inputText
                    converterMessage="#{atmBundle.travelNumber} #{atmBundle.invalid}"
                    id="travelNumber" maxlength="35"
                    readonly="#{cc.isReadOnly('travelNumber',cc.attrs.readOnlyList,cc.attrs.readOnly)}"
                    rendered="#{cc.isRendered('travelNumber',cc.attrs.renderedList,cc.attrs.renderedBoolean)}"
                    required="#{cc.isRequired('travelNumber',cc.attrs.requiredList,cc.attrs.required)}"
                    requiredMessage="#{atmBundle.travelNumber} #{atmBundle.required}"
                    size="35" style="width: 140px"
                    validatorMessage="#{atmBundle.travelNumber} #{atmBundle.invalid}" value="#{cc.attrs.value.travelNumber}"/>
                <p:message for="travelNumber"/>
            </h:panelGroup>
            <h:outputLabel for="provenance" rendered="#{cc.isRendered('provenance',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.provenanceLabel} <span>#{cc.isRequiredString('provenance',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup id="provenanceBlock">
                <r:country id="provenance"
                    readOnly="#{cc.isReadOnly('provenance',cc.attrs.readOnlyList,cc.attrs.readOnly)}"
                    rendered="#{cc.isRendered('provenance',cc.attrs.renderedList,cc.attrs.renderedBoolean)}"
                    required="#{cc.isRequired('provenance',cc.attrs.requiredList,cc.attrs.required)}" value="#{cc.attrs.value.provenance}"/>
            </h:panelGroup>
            
            
            
      <h:outputLabel for="origin" rendered="#{cc.isRendered('origin',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.originLabel} <span>#{cc.isRequiredString('origin',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup id="originBlock">
                <r:country id="origin"
                    readOnly="#{cc.isReadOnly('origin',cc.attrs.readOnlyList,cc.attrs.readOnly)}"
                    rendered="#{cc.isRendered('origin',cc.attrs.renderedList,cc.attrs.renderedBoolean)}"
                    required="#{cc.isRequired('origin',cc.attrs.requiredList,cc.attrs.required)}" value="#{cc.attrs.value.origin}"/>
            </h:panelGroup>
            
            
            <h:outputLabel for="destination" rendered="#{cc.isRendered('destination',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.destinationLabel} <span>#{cc.isRequiredString('destination',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup id="destinationBlock">
                <r:country id="destination"
                    country="CM"
                    disabled="true"
                    readOnly="true"
                    rendered="#{cc.isRendered('destination',cc.attrs.renderedList,cc.attrs.renderedBoolean)}"  />
            </h:panelGroup>    

            
            
            
            <h:outputLabel for="leavingDate" rendered="#{cc.isRendered('leavingDate',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.leavingDateLabel} <span>#{cc.isRequiredString('leavingDate',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup rendered="#{cc.isRendered('leavingDate',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
                <p:calendar
                    converterMessage="#{atmBundle.leavingDate} #{atmBundle.invalide}"
                    id="leavingDate" mask="true" maxlength="17"
                    pattern="#{atmBundle.dateFormat}"
                    readonly="#{cc.isReadOnly('leavingDate',cc.attrs.readOnlyList,cc.attrs.readOnly)}"
                    required="#{cc.isRequired('leavingDate',cc.attrs.requiredList,cc.attrs.required)}"
                    requiredMessage="#{atmBundle.leavingDate} #{atmBundle.required}"
                    size="17"
                    validatorMessage="#{atmBundle.leavingDate} #{atmBundle.invalide}" value="#{cc.attrs.value.leavingDate}">
                    <f:convertDateTime pattern="#{atmBundle.dateFormat}"/>
                </p:calendar>
                <p:message for="leavingDate"/>
            </h:panelGroup>
            <h:outputLabel for="arrivalDate" rendered="#{cc.isRendered('arrivalDate',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.arrivalDateLabel} <span>#{cc.isRequiredString('arrivalDate',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup rendered="#{cc.isRendered('arrivalDate',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
                <p:calendar
                    converterMessage="#{atmBundle.arrivalDate} #{atmBundle.invalide}"
                    id="arrivalDate" mask="true" maxlength="17"
                    pattern="#{atmBundle.dateFormat}"
                    readonly="#{cc.isReadOnly('arrivalDate',cc.attrs.readOnlyList,cc.attrs.readOnly)}"
                    required="#{cc.isRequired('arrivalDate',cc.attrs.requiredList,cc.attrs.required)}"
                    requiredMessage="#{atmBundle.arrivalDate} #{atmBundle.required}"
                    size="17"
                    validatorMessage="#{atmBundle.arrivalDate} #{atmBundle.invalide}" value="#{cc.attrs.value.arrivalDate}">
                    <f:convertDateTime pattern="#{atmBundle.dateFormat}"/>
                </p:calendar>
                <p:message for="arrivalDate"/>
            </h:panelGroup>
            <h:outputLabel for="loadingPlace" rendered="#{cc.isRendered('loadingPlace',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.loadingPlaceLabel} <span>#{cc.isRequiredString('loadingPlace',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup id="loadingPlaceBlock">
                <r:customOffice id="loadingPlace"
                    readOnly="#{cc.isReadOnly('loadingPlace',cc.attrs.readOnlyList,cc.attrs.readOnly)}"
                    rendered="#{cc.isRendered('loadingPlace',cc.attrs.renderedList,cc.attrs.renderedBoolean)}"
                    required="#{cc.isRequired('loadingPlace',cc.attrs.requiredList,cc.attrs.required)}" value="#{cc.attrs.value.loadingPlace}"/>
            </h:panelGroup>
            <h:outputLabel for="transportMode" rendered="#{cc.isRendered('transportMode',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.transportModeLabel} <span>#{cc.isRequiredString('transportMode',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup id="transportModeBlock">
                <r:transportMode id="transportMode"
                    readOnly="#{cc.isReadOnly('transportMode',cc.attrs.readOnlyList,cc.attrs.readOnly)}"
                    rendered="#{cc.isRendered('transportMode',cc.attrs.renderedList,cc.attrs.renderedBoolean)}"
                    required="#{cc.isRequired('transportMode',cc.attrs.requiredList,cc.attrs.required)}" value="#{cc.attrs.value.transportMode}"/>
            </h:panelGroup>
            <h:outputLabel for="clearingPlace" rendered="#{cc.isRendered('clearingPlace',cc.attrs.renderedList,cc.attrs.renderedBoolean)}">
    #{atmBundle.clearingPlaceLabel} <span>#{cc.isRequiredString('clearingPlace',cc.attrs.requiredList,cc.attrs.required)}</span>
            </h:outputLabel>
            <h:panelGroup id="clearingPlaceBlock">
                <r:customOffice id="clearingPlace"
                    readOnly="#{cc.isReadOnly('clearingPlace',cc.attrs.readOnlyList,cc.attrs.readOnly)}"
                    rendered="#{cc.isRendered('clearingPlace',cc.attrs.renderedList,cc.attrs.renderedBoolean)}"
                    required="#{cc.isRequired('clearingPlace',cc.attrs.requiredList,cc.attrs.required)}" value="#{cc.attrs.value.clearingPlace}"/>
            </h:panelGroup>
        </h:panelGrid>
        <p:outputPanel>
            <script>
                jQuery(document).ready(function () {
                    jQuery('table.transportBlock tr').each(function (index) {
                        jQuery(this).children("td:eq(0),td:eq(2)").addClass("tdlabel");
                        jQuery(this).children("td:eq(1),td:eq(3)").addClass("tdinput");
                    });
                });
            </script>
        </p:outputPanel>
        <style>
            table.transportBlock {
                font-size: 0.9em;
                width:100%;

            }
            .transportBlock label{
                font-weight: 900;
                display:block;
                text-align:right;
                padding-right:10px;
            }
            .transportBlock select{
                padding:5px;
            }
            .transportBlock label span{
                color:red;
                font-size: 1.3em;

            }
            .transportBlock .ui-selectonemenu-label{
                display:block;
            }
            .transportBlock .ui-fieldset-legend{
                background: rgb(0, 51, 102);
                color:#fff;
            }
            .transportBlock.ui-inputtext[readonly="readonly"],
            .transportBlock .hasDatepicker[readonly="readonly"],
            .transportBlock .ui-inputtextarea[readonly="readonly"]{
                background:#EEE;
            }
            .borderB{
                padding-bottom:10px;
            }

            .tdlabel{
                width:15%;
            }
            .tdinput{
                width:35%;
            }
        </style>
    </composite:implementation>
</html>
